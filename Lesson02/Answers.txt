NEED TO KNOW
1. What is kwargs and why do we need them?

    **kwargs  - это словарь в котором в функцию передаются именованные
    аргументы, возможно также передавать в функцию список или кортеж
    позиционных аргументов (*args)

2. What is decorator?

    Декоратор это callable (объект содержащий метод __call__) объект-оболочка
    который принимает в качестве аргумента декорируемую функцию и возвращает
    новую функцию, которая по сути есть изменённый вариант переданной функции,
    она может делать что-либо до и после того, что сделает декорируемая
    функция при этом не изменяя её.

3. How to write your own decorator as a function(1) and a class(2).

    1. Написать функцию(декоратор) которая принимает другую функцию
    (декорируемая функция) в качестве аргумента и содержит внутри себя
    определение возвращаемой функции(задекорированная функция).
    def decorator(function_to_decorate):
        def wrapper():
            print "before"
            function_to_decorate()
            print "after"
        return wrapper

    2. Написать класс который при инициализации создает внутри себя переменную
    с декорируемой функцией и имеет метод __call__ при вызове которого
    выполняется задекорированная функция

    class Decorator(object):

        def __init__(self, function_to_decorate):
            self.func = function_to_decorate

        def wrapped_function(self, *args, **kwargs):
            print "before"
            self.func(*args, **kwargs)
            print "after"

        def __call__(self, *args, **kwargs):
            return self.wrapped_function(*args, **kwargs)

        @Decorator
        def test_func():
            print "inside"

        >>> test_func()
        before
        inside
        after

4. How to start a new thread and attach it to the main thread.
    1. Используя библиотеку threading создаем поток th который будет выполнять
    функцию func с параметрами *args, **kwargs
        th = threading.Thread(target=func, *args, **kwargs)
        target - любой callable object - функция, метод класса
    2. Запускаем выполнение func в отдельном потоке
        th.start()
    3. С помощью команды join() заставляем поток в котором вызвана эта команда
    (основной поток или другой) дождаться завершения выполнения
    присоединенного потока и только потом завершиться самому
        th.join()

5. What is GIL (Global Interpreter Lock)?
    GIL -  система предотвращающая выполнение нескольких потоков одновременно
    в одном интерпретаторе Python GIL блокирует остальные потоки (кроме
    потока удерживающего GIL) и гарантирует этому потоку эксклюзивный доступ
    к переменным интерпретатора.

