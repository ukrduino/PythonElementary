NEED TO KNOW

1. How to open and how to close a file.

    f = open('my_file', 'w')
    'r' – чтение.
    'w' – запись.
    'a' – добавление.
    'b' – бинарный режим.
    '+' – чтение/запись.

    f.close() - закрыть файл

    with open("x.txt") as f:
        data = f.read()
        do something with data

    после выхода из with файл будет закрыт

2. What does the keyword "with" mean?

    Конструкция with ... as используется для оборачивания выполнения блока инструкций менеджером контекста
    и должна вернуть объект предоставляющий протокол менеджера контекста. Для некоторых встроенных объектов
    уже определены менеджеры контекста. Например, такой менеджер определен для файлов, чтобы быть уверенным,
    что файл будет закрыт при выходе из блока.


3. What is a module?

    Модулем в Python называется файл с кодом, с расширением .py .
    Модуль можно запустить самостоятельно (if __name__ == "__main__":) либо импортировать  с помощью import в другой модуль и использовать в нем.
    Можно импортировать модуль под псевдонимом использую as.
    Можно импортировать один или несколько объектов модуля (класс, функция, переменная) используя from.

4. How to write your own module?

    Создать файл с расширением .py и кодом внутри.

5. How to write and run unit tests?

    Для написания Юнит тестов можно использовать встроенный фреймворк unittest
    1. Создаем тестовый класс который наследуется от unittest.TestCase.
    2. Пишем тест кейсы в внутри класса в виде функций название которых начинается с test_
    3. В тест кейсах используем разнообразные assert'ы
    4. Для создания предусловий используем метод setUp
    5. Для очистки после теста используем tearDown
    6. Для запуска используем конструкцию
        if __name__ == "__main__":
            unittest.main()

6. How to mock user input and file system calls?

    Mock (подменить) ввод данных пользователем можно
    1. с помощью библиотеки mock
    Заменив данные возвращаемые встроенным методом __builtins__.raw_input c помощью
    декоратора @patch
    2. просто заменив __builtins__.raw_input на функцияю которая возвращает текст
    __builtins__.raw_input = lambda x: "yes"

    Mock file system calls можно с помощью библиотеки pyfakefs которая предоставляет
    "не настоящую" файловую систему с которой работают стандартные методы Python



